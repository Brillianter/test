# -*- coding: utf-8 -*-
from tkinter import *
from tkinter import messagebox
import sqlite3

'''
提示学生签到成功与否
'''


def prompt():
    student_number = int(number_text.get())
    student_name = name_text.get()
    if student_number != '' and student_name != '':
        messagebox.showinfo(title='提示:', message='签到成功')
    else:
        messagebox.showinfo(title='提示:', message='签到不成功')


'''创建数据库及数据表'''


def create_table():
    global class_name
    student_number = int(number_text.get())
    student_name = name_text.get()
    class_name = class_text.get()
    conn = sqlite3.connect('sign.db')  # 连接数据库,如果不存在则创建
    print("数据库建立成功")
    cursor = conn.cursor()  # 创建游标
    sql = 'create table if not exists ' + class_name + '(id int primary key not null, name text)'
    cursor.execute(sql)
    print("数据表建立成功")
    cursor.execute('insert or replace into ' + class_name + '(id,name) values (?,?)', (student_name, student_number))
    print("插入数据成功")
    cursor.close()  # 关闭游标
    conn.commit()  # 执行命令
    conn.close()  # 关闭连接
    window.destroy()


'''
主界面
'''
if __name__ == '__main__':
    window = Tk()
    window.title('签到')  # 窗口名
    window.geometry('450x300')  # 窗口大小（长x宽） 乘为小x
    title_label = Label(window, text='课堂签到', font=('Arial', 14))  # 窗口标题
    title_label.place(x=185, y=50)
    number_label = Label(window, text='学号')  # ‘用户名’标签
    number_label.place(x=120, y=100)
    number_text = Entry(window)  # 输入学名
    number_text.place(x=170, y=100)
    name_label = Label(window, text='姓名')  # ‘密码’标签
    name_label.place(x=120, y=140)
    name_text = Entry(window)  # 输入密码
    name_text.place(x=170, y=140)
    class_label = Label(window, text='班级')  # ‘班级’标签
    class_label.place(x=120, y=180)
    class_text = Entry(window)  # 输入班级
    class_text.place(x=170, y=180)

    '''
    创建按钮，触发事件
    '''
    login_button = Button(window, text='签到', command=lambda: [prompt(), create_table()], width=10,
                          font=('仿宋', 10))
    login_button.place(x=150, y=220)
    exit_button = Button(window, text='退出', command=window.quit, width=10, font=('仿宋', 10))
    exit_button.place(x=250, y=220)
    number_text.bind('Return', prompt)
    login_button.bind('Return', prompt)
    exit_button.bind('Return', prompt)
    window.mainloop()




# 查询数据
sql = "select * from 数应191"
conn = sqlite3.connect('sign.db')
# 创建游标
cursor = conn.cursor()
values = cursor.execute(sql)
for i in values:
    print(i)






import tkinter as tk
import tkinter as Tkinter
from tkinter import *
import tkinter.messagebox
import random
import pandas as pd
import pygame

import cgi, os, sys
import sqlite3 as db
conn = db.connect('sign.db')
cursor = conn.cursor()
conn.row_factory = db.Row
cursor.execute("select * from 数应191")
rows = cursor.fetchall()
sys.stdout.write("Content-type: text.html\r\n\r\n")
sys.stdout.write("")
sys.stdout.write("<html><body><p>")
data = []
for row in rows:
    data.append(row)
    sys.stdout.write("%s %s" % (row[0], row[1]))
    sys.stdout.write("<br />")
sys.stdout.write("</p></body></html>")
print(data)

going = True  # 表示是否可以继续滚动(递归)显示下一个名额
is_run = False  # 表示当前抽奖器是否在运行


def lottery_roll(var1):
    global going
    show_member = random.choice(data)  # 随机选取姓名
    var1.set(show_member)  # var1 显示抽取出来的姓名
    if going:  # going=True
        window.after(50, lottery_roll, var1)  # 每50毫秒循环一次
    else:  # going=False
        result = tkinter.messagebox.showinfo(title='最终结果！', message='恭喜 {} ！！！'.format(show_member))  # 弹窗显示恭喜+抽取出来的姓名
        going = True
        return  # 跳出def


'''
开始
'''
def lottery_start(var1):
    global is_run
    if is_run:  # is_run = True
        return  # 跳出def

    is_run = True
    file = r'C:/Users/mac/Desktop/无词.mp3'  # 音乐的路径
    pygame.mixer.init()  # 初始化
    track = pygame.mixer.music.load(file)  # 加载音乐文件
    # pygame.mixer.music.play()
    pygame.mixer.music.play(-1)  # 开始播放音乐流
    pygame.mixer.music.set_volume(0.4)  # 控制音乐声音的大小
    lottery_roll(var1)  # 执行循环抽取姓名的执行语句


'''
结束
'''
def lottery_end():
    global going, is_run
    if is_run:
        pygame.mixer.music.stop()
        going = False
        is_run = False


if __name__ == '__main__':  # 如果模块是被直接运行的，则代码块被运行，如果模块是被导入的，则代码块不被运行。
    window = Tkinter.Tk()
    window.title('点名程序：')
    window.geometry('405x320+250+15')
    bg_label = Label(window, width=70, height=24)
    bg_label.place(anchor=NW, x=0, y=0)

    var1 = StringVar(value='即 将 开 始')
    show_label1 = Label(window, textvariable=var1, justify='left', anchor=CENTER, width=17, height=3,
                        font='楷体 -40 bold', foreground='black')
    show_label1.place(anchor=NW, x=21, y=20)

    button1 = Button(window, text='开始', command=lambda: lottery_start(var1), width=14, height=2, bg='#A8A8A8',
                     font='宋体 -18 bold')
    button1.place(anchor=NW, x=20, y=175)

    button2 = Button(window, text='结束', command=lambda: lottery_end(), width=14, height=2, bg='#A8A8A8',
                     font='宋体 -18 bold')
    button2.place(anchor=NW, x=232, y=175)

    window.mainloop()
